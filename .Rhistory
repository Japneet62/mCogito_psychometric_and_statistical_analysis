DRT.D.cor.sex <- cor(DRT_discrimination, DRT_grp$sex_M1_F0)
corrplot(DRT.D.cor.sex)
DRT.D.cor.age <- cor(DRT_discrimination, DRT_grp$age)
corrplot(DRT.D.cor.age)
################# ----------- CORRELATIONS ----------------- ###################
## 1. Clear work space and set path variables
rm(list=ls()) # clear environment
graphics.off() # clear plots
pathin <- "/Users/japneetbhatia/desktop/thesis/13.STATISTICAL_ANALYSIS/scripts"
setwd(pathin)
source("4.data_restructing.R")
mainpath <- "/Users/japneetbhatia/desktop/thesis/14.STATISTICAL_RESULTS"
# libraries
# install.packages("Hmisc")
library("Hmisc")
# ++++++++++++++++++++++++++++
# flattenCorrMatrix - Function to format the correlation matrix in df format
# ++++++++++++++++++++++++++++
# cormat : matrix of the correlation coefficients
# pmat : matrix of the correlation p-values
flattenCorrMatrix <- function(cormat, pmat) {
ut <- upper.tri(cormat)
data.frame(
row = rownames(cormat)[row(cormat)[ut]],
column = rownames(cormat)[col(cormat)[ut]],
cor  =(cormat)[ut],
p = pmat[ut]
)
}
## ------ 1. Item level Correlations with age and gender -------- ###
# i. DRT - recognition
DRT_grp_recognition <- DRT_grp[,c(3, 5, 8, 10, 12, 14, 16, 19)] # data + age
DRT_R_corr <- rcorr(as.matrix(DRT_grp_recognition), type = "pearson")   # find correlations
DRT_R_corr_f <- flattenCorrMatrix(DRT_R_corr$r, DRT_R_corr$P) # flatten the correlation matrix
DRT_R_corr_f %>% arrange(-p)
# library(corrplot)
# corrplot(data.frame(DRT_R_corr_f$p), type = "upper", order = "hclust",
#          tl.col = "black", tl.srt = 45)
# ii. DRT - discrimination
DRT_grp_discrimination<- DRT_grp[,c(1, 4, 6, 9, 11, 13, 18, 19, 21)] # our main data table
DRT_D_corr <- rcorr(as.matrix(DRT_grp_discrimination))    # find correlations
DRT_D_corr_f <- flattenCorrMatrix(DRT_D_corr$r, DRT_D_corr$P) # flatten the correlation matrix
# iii. FRT - fluid intellegence
FRT_grp <- FRT_grp[c(-26,-30),c(-32,-34,-35,-36,-37)]
FRT_corr <- rcorr(as.matrix(FRT_grp))    # find correlations
FRT_corr_f <- flattenCorrMatrix(FRT_corr$r, FRT_corr$P) # flatten the correlation matrix
FRT_corr_f %>% arrange(-cor)
# iv. SART
SART_clean <- SART_grp[c(-7,-9,-19),c(-6, -8, -9, -10, -11)] # remove cmissing values
SART_corr <- rcorr(as.matrix(SART_clean))   # find correlations
SART_corr_f <- flattenCorrMatrix(SART_corr$r, SART_corr$P) # flatten the correlation matrix
SART_corr_f %>% arrange(-cor)
### --- 2. Inter-correlation between all the tasks - DRT_R, DRT_D, FRT, with SART by taking the person.parameter
# -------- values for the item level dichotomous response tasks (D,R,FI)
# # Extract recognition and discrim items
DRT_recognition <- DRT_grp[,c(3, 5, 8, 10, 12, 14, 16)]
DRT_discrimination<- DRT_grp[,c(1, 4, 6, 9, 11, 13, 18)]
# Load the person parameter values for R, D, FRT
setwd(mainpath)
p.par <- as.data.frame(read_excel("Person_parameter.xlsx", sheet = 1, col_names = TRUE))
p.par[] <-as.data.frame(sapply(p.par, as.numeric)) #convert SART values to numeric
p.par<- p.par[,c(-1,-9)] # remove subid
# calculate correlation by keeping SART as criterion variable
cor.SART.corr <- cor(p.par$com_err, p.par[,c("Recognition", "Discrimination",
"FluidIntellegence")], use = "pairwise.complete.obs",
method = "pearson")
cor.SART.sum.err <- cor(p.par$sum_err, p.par[,c("Recognition", "Discrimination",
"FluidIntellegence")], use = "pairwise.complete.obs",
method = "pearson")
cor.SART.com.err <- cor(p.par$com_err, p.par[,c("Recognition", "Discrimination",
"FluidIntellegence")], use = "pairwise.complete.obs",
method = "pearson")
cor.SART.om.err <- cor(p.par$om_err, p.par[,c("Recognition", "Discrimination",
"FluidIntellegence")], use = "pairwise.complete.obs",
method = "pearson")
#### ----------------------- Plot correlations ----------------------- ########
# install.packages("psych")
library(psych)
# create a scatterplot for this first
library("PerformanceAnalytics")
# library("corrplot")
# corrplot(cor.SART.corr, method = "num") #  correlogram
# -- Final plot needed for correlation --- #
chart.Correlation(as.matrix(p.par), histogram=TRUE, pch=19)
##-- Another attempt at correlations to plot with chart.correlation function with SART as criterion var
data1 <- data.frame(cbind(SART = p.par$corr, Recognition = p.par$Recognition, Discrimination=p.par$Discrimination, FluidIntellegence=p.par$FluidIntellegence))
data2 <- data.frame(cbind(SART = p.par$sum_err, Recognition = p.par$Recognition, Discrimination=p.par$Discrimination, FluidIntellegence=p.par$FluidIntellegence))
data3 <- cbind(p.par$com_err, p.par$Recognition, p.par$Discrimination, p.par$FluidIntellegence)
data4 <- cbind(p.par$om_err, p.par$Recognition, p.par$Discrimination, p.par$FluidIntellegence)
corr_matrix <- cor(data1, method = "pearson", use = "pairwise.complete.obs")
chart.Correlation(data1, histogram=TRUE, pch=19, method = "pearson") # correlation plot
plot(SART$corr)
## ANOTHER ATTEMPT
# install.packages("ggplot2")
# install.packages("GGally")
library("ggplot2")
library("GGally")
ggpairs(
data1,
title = "Correlation matrix for SART, Recognition, Discrimination and Fluid Intellegence")
ggpairs(data2)
### -- CORRELATION BETWEEN GENDER / AGE WITH  ITEM LEVEL DATA-- #
# DRT - R
DRT.R.cor.sex <- cor(DRT_recognition, DRT_grp$sex_M1_F0)
corrplot(DRT.R.cor.sex)
DRT.R.cor.age <- cor(DRT_recognition, DRT_grp$age)
corrplot(DRT.R.cor.age)
# DRT - D
DRT.D.cor.sex <- cor(DRT_discrimination, DRT_grp$sex_M1_F0)
corrplot(DRT.D.cor.sex)
DRT.D.cor.age <- cor(DRT_discrimination, DRT_grp$age)
corrplot(DRT.D.cor.age)
ggpairs(data2)
################# ----------- CORRELATIONS ----------------- ###################
## 1. Clear work space and set path variables
rm(list=ls()) # clear environment
graphics.off() # clear plots
pathin <- "/Users/japneetbhatia/desktop/thesis/13.STATISTICAL_ANALYSIS/scripts"
setwd(pathin)
source("4.data_restructing.R")
mainpath <- "/Users/japneetbhatia/desktop/thesis/14.STATISTICAL_RESULTS"
# libraries
# install.packages("Hmisc")
library("Hmisc")
# ++++++++++++++++++++++++++++
# flattenCorrMatrix - Function to format the correlation matrix in df format
# ++++++++++++++++++++++++++++
# cormat : matrix of the correlation coefficients
# pmat : matrix of the correlation p-values
flattenCorrMatrix <- function(cormat, pmat) {
ut <- upper.tri(cormat)
data.frame(
row = rownames(cormat)[row(cormat)[ut]],
column = rownames(cormat)[col(cormat)[ut]],
cor  =(cormat)[ut],
p = pmat[ut]
)
}
## ------ 1. Item level Correlations with age and gender -------- ###
# i. DRT - recognition
DRT_grp_recognition <- DRT_grp[,c(3, 5, 8, 10, 12, 14, 16, 19)] # data + age
DRT_R_corr <- rcorr(as.matrix(DRT_grp_recognition), type = "pearson")   # find correlations
DRT_R_corr_f <- flattenCorrMatrix(DRT_R_corr$r, DRT_R_corr$P) # flatten the correlation matrix
DRT_R_corr_f %>% arrange(-p)
# library(corrplot)
# corrplot(data.frame(DRT_R_corr_f$p), type = "upper", order = "hclust",
#          tl.col = "black", tl.srt = 45)
# ii. DRT - discrimination
DRT_grp_discrimination<- DRT_grp[,c(1, 4, 6, 9, 11, 13, 18, 19, 21)] # our main data table
DRT_D_corr <- rcorr(as.matrix(DRT_grp_discrimination))    # find correlations
DRT_D_corr_f <- flattenCorrMatrix(DRT_D_corr$r, DRT_D_corr$P) # flatten the correlation matrix
# iii. FRT - fluid intellegence
FRT_grp <- FRT_grp[c(-26,-30),c(-32,-34,-35,-36,-37)]
FRT_corr <- rcorr(as.matrix(FRT_grp))    # find correlations
FRT_corr_f <- flattenCorrMatrix(FRT_corr$r, FRT_corr$P) # flatten the correlation matrix
FRT_corr_f %>% arrange(-cor)
# iv. SART
SART_clean <- SART_grp[c(-7,-9,-19),c(-6, -8, -9, -10, -11)] # remove cmissing values
SART_corr <- rcorr(as.matrix(SART_clean))   # find correlations
SART_corr_f <- flattenCorrMatrix(SART_corr$r, SART_corr$P) # flatten the correlation matrix
SART_corr_f %>% arrange(-cor)
### --- 2. Inter-correlation between all the tasks - DRT_R, DRT_D, FRT, with SART by taking the person.parameter
# -------- values for the item level dichotomous response tasks (D,R,FI)
# # Extract recognition and discrim items
DRT_recognition <- DRT_grp[,c(3, 5, 8, 10, 12, 14, 16)]
DRT_discrimination<- DRT_grp[,c(1, 4, 6, 9, 11, 13, 18)]
# Load the person parameter values for R, D, FRT
setwd(mainpath)
p.par <- as.data.frame(read_excel("Person_parameter.xlsx", sheet = 1, col_names = TRUE))
p.par[] <-as.data.frame(sapply(p.par, as.numeric)) #convert SART values to numeric
p.par<- p.par[,c(-1,-9)] # remove subid
# calculate correlation by keeping SART as criterion variable
cor.SART.corr <- cor(p.par$com_err, p.par[,c("Recognition", "Discrimination",
"FluidIntellegence")], use = "pairwise.complete.obs",
method = "pearson")
cor.SART.sum.err <- cor(p.par$sum_err, p.par[,c("Recognition", "Discrimination",
"FluidIntellegence")], use = "pairwise.complete.obs",
method = "pearson")
cor.SART.com.err <- cor(p.par$com_err, p.par[,c("Recognition", "Discrimination",
"FluidIntellegence")], use = "pairwise.complete.obs",
method = "pearson")
cor.SART.om.err <- cor(p.par$om_err, p.par[,c("Recognition", "Discrimination",
"FluidIntellegence")], use = "pairwise.complete.obs",
method = "pearson")
#### ----------------------- Plot correlations ----------------------- ########
# install.packages("psych")
library(psych)
# create a scatterplot for this first
library("PerformanceAnalytics")
# library("corrplot")
# corrplot(cor.SART.corr, method = "num") #  correlogram
# -- Final plot needed for correlation --- #
chart.Correlation(as.matrix(p.par), histogram=TRUE, pch=19)
##-- Another attempt at correlations to plot with chart.correlation function with SART as criterion var
data1 <- data.frame(cbind(SART = p.par$corr, Recognition = p.par$Recognition, Discrimination=p.par$Discrimination, FluidIntellegence=p.par$FluidIntellegence))
data2 <- data.frame(cbind(SART = p.par$sum_err, Recognition = p.par$Recognition, Discrimination=p.par$Discrimination, FluidIntellegence=p.par$FluidIntellegence))
data3 <- cbind(p.par$com_err, p.par$Recognition, p.par$Discrimination, p.par$FluidIntellegence)
data4 <- cbind(p.par$om_err, p.par$Recognition, p.par$Discrimination, p.par$FluidIntellegence)
corr_matrix <- cor(data1, method = "pearson", use = "pairwise.complete.obs")
chart.Correlation(data1, histogram=TRUE, pch=19, method = "pearson") # correlation plot
plot(SART$corr)
## ANOTHER ATTEMPT
# install.packages("ggplot2")
# install.packages("GGally")
library("ggplot2")
library("GGally")
ggpairs(
data1,
title = "Correlation matrix for SART, Recognition, Discrimination and Fluid Intellegence")
ggpairs(data2)
### -- CORRELATION BETWEEN GENDER / AGE WITH  ITEM LEVEL DATA-- #
# DRT - R
DRT.R.cor.sex <- cor(DRT_recognition, DRT_grp$sex_M1_F0)
corrplot(DRT.R.cor.sex)
DRT.R.cor.age <- cor(DRT_recognition, DRT_grp$age)
corrplot(DRT.R.cor.age)
# DRT - D
DRT.D.cor.sex <- cor(DRT_discrimination, DRT_grp$sex_M1_F0)
corrplot(DRT.D.cor.sex)
DRT.D.cor.age <- cor(DRT_discrimination, DRT_grp$age)
corrplot(DRT.D.cor.age)
################# ----------- CORRELATIONS ----------------- ###################
## 1. Clear work space and set path variables
rm(list=ls()) # clear environment
graphics.off() # clear plots
pathin <- "/Users/japneetbhatia/desktop/thesis/13.STATISTICAL_ANALYSIS/scripts"
setwd(pathin)
source("4.data_restructing.R")
mainpath <- "/Users/japneetbhatia/desktop/thesis/14.STATISTICAL_RESULTS"
# libraries
# install.packages("Hmisc")
library("Hmisc")
# ++++++++++++++++++++++++++++
# flattenCorrMatrix - Function to format the correlation matrix in df format
# ++++++++++++++++++++++++++++
# cormat : matrix of the correlation coefficients
# pmat : matrix of the correlation p-values
flattenCorrMatrix <- function(cormat, pmat) {
ut <- upper.tri(cormat)
data.frame(
row = rownames(cormat)[row(cormat)[ut]],
column = rownames(cormat)[col(cormat)[ut]],
cor  =(cormat)[ut],
p = pmat[ut]
)
}
## ------ 1. Item level Correlations with age and gender -------- ###
# i. DRT - recognition
DRT_grp_recognition <- DRT_grp[,c(3, 5, 8, 10, 12, 14, 16, 19)] # data + age
DRT_R_corr <- rcorr(as.matrix(DRT_grp_recognition), type = "pearson")   # find correlations
DRT_R_corr_f <- flattenCorrMatrix(DRT_R_corr$r, DRT_R_corr$P) # flatten the correlation matrix
DRT_R_corr_f %>% arrange(-p)
# library(corrplot)
# corrplot(data.frame(DRT_R_corr_f$p), type = "upper", order = "hclust",
#          tl.col = "black", tl.srt = 45)
# ii. DRT - discrimination
DRT_grp_discrimination<- DRT_grp[,c(1, 4, 6, 9, 11, 13, 18, 19, 21)] # our main data table
DRT_D_corr <- rcorr(as.matrix(DRT_grp_discrimination))    # find correlations
DRT_D_corr_f <- flattenCorrMatrix(DRT_D_corr$r, DRT_D_corr$P) # flatten the correlation matrix
# iii. FRT - fluid intellegence
FRT_grp <- FRT_grp[c(-26,-30),c(-32,-34,-35,-36,-37)]
FRT_corr <- rcorr(as.matrix(FRT_grp))    # find correlations
FRT_corr_f <- flattenCorrMatrix(FRT_corr$r, FRT_corr$P) # flatten the correlation matrix
FRT_corr_f %>% arrange(-cor)
# iv. SART
SART_clean <- SART_grp[c(-7,-9,-19),c(-6, -8, -9, -10, -11)] # remove cmissing values
SART_corr <- rcorr(as.matrix(SART_clean))   # find correlations
SART_corr_f <- flattenCorrMatrix(SART_corr$r, SART_corr$P) # flatten the correlation matrix
SART_corr_f %>% arrange(-cor)
### --- 2. Inter-correlation between all the tasks - DRT_R, DRT_D, FRT, with SART by taking the person.parameter
# -------- values for the item level dichotomous response tasks (D,R,FI)
# # Extract recognition and discrim items
DRT_recognition <- DRT_grp[,c(3, 5, 8, 10, 12, 14, 16)]
DRT_discrimination<- DRT_grp[,c(1, 4, 6, 9, 11, 13, 18)]
# Load the person parameter values for R, D, FRT
setwd(mainpath)
p.par <- as.data.frame(read_excel("Person_parameter.xlsx", sheet = 1, col_names = TRUE))
p.par[] <-as.data.frame(sapply(p.par, as.numeric)) #convert SART values to numeric
p.par<- p.par[,c(-1,-9)] # remove subid
# calculate correlation by keeping SART as criterion variable
cor.SART.corr <- cor(p.par$com_err, p.par[,c("Recognition", "Discrimination",
"FluidIntellegence")], use = "pairwise.complete.obs",
method = "pearson")
cor.SART.sum.err <- cor(p.par$sum_err, p.par[,c("Recognition", "Discrimination",
"FluidIntellegence")], use = "pairwise.complete.obs",
method = "pearson")
cor.SART.com.err <- cor(p.par$com_err, p.par[,c("Recognition", "Discrimination",
"FluidIntellegence")], use = "pairwise.complete.obs",
method = "pearson")
cor.SART.om.err <- cor(p.par$om_err, p.par[,c("Recognition", "Discrimination",
"FluidIntellegence")], use = "pairwise.complete.obs",
method = "pearson")
#### ----------------------- Plot correlations ----------------------- ########
# install.packages("psych")
library(psych)
# create a scatterplot for this first
library("PerformanceAnalytics")
# library("corrplot")
# corrplot(cor.SART.corr, method = "num") #  correlogram
# -- Final plot needed for correlation --- #
chart.Correlation(as.matrix(p.par), histogram=TRUE, pch=19)
##-- Another attempt at correlations to plot with chart.correlation function with SART as criterion var
data1 <- data.frame(cbind(SART = p.par$corr, Recognition = p.par$Recognition, Discrimination=p.par$Discrimination, FluidIntellegence=p.par$FluidIntellegence))
data2 <- data.frame(cbind(SART = p.par$sum_err, Recognition = p.par$Recognition, Discrimination=p.par$Discrimination, FluidIntellegence=p.par$FluidIntellegence))
data3 <- cbind(p.par$com_err, p.par$Recognition, p.par$Discrimination, p.par$FluidIntellegence)
data4 <- cbind(p.par$om_err, p.par$Recognition, p.par$Discrimination, p.par$FluidIntellegence)
corr_matrix <- cor(data1, method = "pearson", use = "pairwise.complete.obs")
chart.Correlation(data1, histogram=TRUE, pch=19, method = "pearson") # correlation plot
plot(SART$corr)
## ANOTHER ATTEMPT
# install.packages("ggplot2")
# install.packages("GGally")
library("ggplot2")
library("GGally")
ggpairs(
data1,
title = "Correlation matrix for SART, Recognition, Discrimination and Fluid Intellegence")
ggpairs(data2)
### -- CORRELATION BETWEEN GENDER / AGE WITH  ITEM LEVEL DATA-- #
# DRT - R
# DRT.R.cor.sex <- cor(DRT_recognition, DRT_grp$sex_M1_F0)
# corrplot(DRT.R.cor.sex)
#
# DRT.R.cor.age <- cor(DRT_recognition, DRT_grp$age)
# corrplot(DRT.R.cor.age)
#
# # DRT - D
# DRT.D.cor.sex <- cor(DRT_discrimination, DRT_grp$sex_M1_F0)
# corrplot(DRT.D.cor.sex)
#
# DRT.D.cor.age <- cor(DRT_discrimination, DRT_grp$age)
# corrplot(DRT.D.cor.age)
## 1. Clear work space and set path variables
rm(list=ls()) # clear environment
graphics.off() # clear plots
pathin <- "/Users/japneetbhatia/desktop/thesis/13.STATISTICAL_ANALYSIS/scripts"
setwd(pathin)
source("4.data_restructing.R")
mainpath <- "/Users/japneetbhatia/desktop/thesis/14.STATISTICAL_RESULTS"
# install.packages("Hmisc")
library("Hmisc")
flattenCorrMatrix <- function(cormat, pmat) {
ut <- upper.tri(cormat)
data.frame(
row = rownames(cormat)[row(cormat)[ut]],
column = rownames(cormat)[col(cormat)[ut]],
cor  =(cormat)[ut],
p = pmat[ut]
)
}
DRT_grp_recognition <- DRT_grp[,c(3, 5, 8, 10, 12, 14, 16, 19)] # data + age
DRT_R_corr <- rcorr(as.matrix(DRT_grp_recognition), type = "pearson")   # find correlations
DRT_R_corr_f <- flattenCorrMatrix(DRT_R_corr$r, DRT_R_corr$P) # flatten the correlation matrix
DRT_R_corr_f %>% arrange(-p)
# ii. DRT - discrimination
DRT_grp_discrimination<- DRT_grp[,c(1, 4, 6, 9, 11, 13, 18, 19, 21)] # our main data table
DRT_D_corr <- rcorr(as.matrix(DRT_grp_discrimination))    # find correlations
DRT_D_corr_f <- flattenCorrMatrix(DRT_D_corr$r, DRT_D_corr$P) # flatten the correlation matrix
# iii. FRT - fluid intellegence
FRT_grp <- FRT_grp[c(-26,-30),c(-32,-34,-35,-36,-37)]
FRT_corr <- rcorr(as.matrix(FRT_grp))    # find correlations
FRT_corr_f <- flattenCorrMatrix(FRT_corr$r, FRT_corr$P) # flatten the correlation matrix
FRT_corr_f %>% arrange(-cor)
# iv. SART
SART_clean <- SART_grp[c(-7,-9,-19),c(-6, -8, -9, -10, -11)] # remove cmissing values
SART_corr <- rcorr(as.matrix(SART_clean))   # find correlations
SART_corr_f <- flattenCorrMatrix(SART_corr$r, SART_corr$P) # flatten the correlation matrix
SART_corr_f %>% arrange(-cor)
### --- 2. Inter-correlation between all the tasks - DRT_R, DRT_D, FRT, with SART by taking the person.parameter
# -------- values for the item level dichotomous response tasks (D,R,FI)
# # Extract recognition and discrim items
DRT_recognition <- DRT_grp[,c(3, 5, 8, 10, 12, 14, 16)]
DRT_discrimination<- DRT_grp[,c(1, 4, 6, 9, 11, 13, 18)]
setwd(mainpath)
p.par <- as.data.frame(read_excel("Person_parameter.xlsx", sheet = 1, col_names = TRUE))
p.par[] <-as.data.frame(sapply(p.par, as.numeric)) #convert SART values to numeric
p.par<- p.par[,c(-1,-9)] # remove subid
# calculate correlation by keeping SART as criterion variable
cor.SART.corr <- cor(p.par$com_err, p.par[,c("Recognition", "Discrimination",
"FluidIntellegence")], use = "pairwise.complete.obs",
method = "pearson")
cor.SART.sum.err <- cor(p.par$sum_err, p.par[,c("Recognition", "Discrimination",
"FluidIntellegence")], use = "pairwise.complete.obs",
method = "pearson")
cor.SART.com.err <- cor(p.par$com_err, p.par[,c("Recognition", "Discrimination",
"FluidIntellegence")], use = "pairwise.complete.obs",
method = "pearson")
cor.SART.om.err <- cor(p.par$om_err, p.par[,c("Recognition", "Discrimination",
"FluidIntellegence")], use = "pairwise.complete.obs",
method = "pearson")
library(psych)
# create a scatterplot for this first
library("PerformanceAnalytics")
chart.Correlation(as.matrix(p.par), histogram=TRUE, pch=19)
dev.off()
data1 <- data.frame(cbind(SART = p.par$corr, Recognition = p.par$Recognition, Discrimination=p.par$Discrimination, FluidIntellegence=p.par$FluidIntellegence))
data2 <- data.frame(cbind(SART = p.par$sum_err, Recognition = p.par$Recognition, Discrimination=p.par$Discrimination, FluidIntellegence=p.par$FluidIntellegence))
data3 <- cbind(p.par$com_err, p.par$Recognition, p.par$Discrimination, p.par$FluidIntellegence)
data4 <- cbind(p.par$om_err, p.par$Recognition, p.par$Discrimination, p.par$FluidIntellegence)
corr_matrix <- cor(data1, method = "pearson", use = "pairwise.complete.obs")
chart.Correlation(data1, histogram=TRUE, pch=19, method = "pearson") # correlation plot
################# ----------- CORRELATIONS ----------------- ###################
## 1. Clear work space and set path variables
rm(list=ls()) # clear environment
graphics.off() # clear plots
pathin <- "/Users/japneetbhatia/desktop/thesis/13.STATISTICAL_ANALYSIS/scripts"
setwd(pathin)
source("4.data_restructing.R")
mainpath <- "/Users/japneetbhatia/desktop/thesis/14.STATISTICAL_RESULTS"
# libraries
library("Hmisc")
# ++++++++++++++++++++++++++++
# flattenCorrMatrix - Function to format the correlation matrix in df format
# ++++++++++++++++++++++++++++
# cormat : matrix of the correlation coefficients
# pmat : matrix of the correlation p-values
flattenCorrMatrix <- function(cormat, pmat) {
ut <- upper.tri(cormat)
data.frame(
row = rownames(cormat)[row(cormat)[ut]],
column = rownames(cormat)[col(cormat)[ut]],
cor  =(cormat)[ut],
p = pmat[ut]
)
}
## ------ 1. Item level Correlations with age and gender -------- ###
# i. DRT - recognition
DRT_grp_recognition <- DRT_grp[,c(3, 5, 8, 10, 12, 14, 16, 19)] # data + age
DRT_R_corr <- rcorr(as.matrix(DRT_grp_recognition), type = "pearson")   # find correlations
DRT_R_corr_f <- flattenCorrMatrix(DRT_R_corr$r, DRT_R_corr$P) # flatten the correlation matrix
DRT_R_corr_f %>% arrange(-p)
# ii. DRT - discrimination
DRT_grp_discrimination<- DRT_grp[,c(1, 4, 6, 9, 11, 13, 18, 19, 21)] # our main data table
DRT_D_corr <- rcorr(as.matrix(DRT_grp_discrimination))    # find correlations
DRT_D_corr_f <- flattenCorrMatrix(DRT_D_corr$r, DRT_D_corr$P) # flatten the correlation matrix
# iii. FRT - fluid intellegence
FRT_grp <- FRT_grp[c(-26,-30),c(-32,-34,-35,-36,-37)]
FRT_corr <- rcorr(as.matrix(FRT_grp))    # find correlations
FRT_corr_f <- flattenCorrMatrix(FRT_corr$r, FRT_corr$P) # flatten the correlation matrix
FRT_corr_f %>% arrange(-cor)
# iv. SART
SART_clean <- SART_grp[c(-7,-9,-19),c(-6, -8, -9, -10, -11)] # remove cmissing values
SART_corr <- rcorr(as.matrix(SART_clean))   # find correlations
SART_corr_f <- flattenCorrMatrix(SART_corr$r, SART_corr$P) # flatten the correlation matrix
SART_corr_f %>% arrange(-cor)
### --- 2. Inter-correlation between all the tasks - DRT_R, DRT_D, FRT, with SART by taking the person.parameter
# -------- values for the item level dichotomous response tasks (D,R,FI)
# # Extract recognition and discrim items
DRT_recognition <- DRT_grp[,c(3, 5, 8, 10, 12, 14, 16)]
DRT_discrimination<- DRT_grp[,c(1, 4, 6, 9, 11, 13, 18)]
# Load the person parameter values for R, D, FRT
setwd(mainpath)
p.par <- as.data.frame(read_excel("Person_parameter.xlsx", sheet = 1, col_names = TRUE))
p.par[] <-as.data.frame(sapply(p.par, as.numeric)) #convert SART values to numeric
p.par<- p.par[,c(-1,-9)] # remove subid
# calculate correlation by keeping SART as criterion variable
cor.SART.corr <- cor(p.par$com_err, p.par[,c("Recognition", "Discrimination",
"FluidIntellegence")], use = "pairwise.complete.obs",
method = "pearson")
cor.SART.sum.err <- cor(p.par$sum_err, p.par[,c("Recognition", "Discrimination",
"FluidIntellegence")], use = "pairwise.complete.obs",
method = "pearson")
cor.SART.com.err <- cor(p.par$com_err, p.par[,c("Recognition", "Discrimination",
"FluidIntellegence")], use = "pairwise.complete.obs",
method = "pearson")
cor.SART.om.err <- cor(p.par$om_err, p.par[,c("Recognition", "Discrimination",
"FluidIntellegence")], use = "pairwise.complete.obs",
method = "pearson")
#### ----------------------- Plot correlations ----------------------- ########
# install.packages("psych")
library(psych)
# create a scatterplot for this first
library("PerformanceAnalytics")
# library("corrplot")
# corrplot(cor.SART.corr, method = "num") #  correlogram
# -- Final plot needed for correlation --- #
chart.Correlation(as.matrix(p.par), histogram=TRUE, pch=19)
##-- Another attempt at correlations to plot with chart.correlation function with SART as criterion var
data1 <- data.frame(cbind(SART = p.par$corr, Recognition = p.par$Recognition, Discrimination=p.par$Discrimination, FluidIntellegence=p.par$FluidIntellegence))
data2 <- data.frame(cbind(SART = p.par$sum_err, Recognition = p.par$Recognition, Discrimination=p.par$Discrimination, FluidIntellegence=p.par$FluidIntellegence))
data3 <- cbind(p.par$com_err, p.par$Recognition, p.par$Discrimination, p.par$FluidIntellegence)
data4 <- cbind(p.par$om_err, p.par$Recognition, p.par$Discrimination, p.par$FluidIntellegence)
corr_matrix <- cor(data1, method = "pearson", use = "pairwise.complete.obs")
chart.Correlation(data1, histogram=TRUE, pch=19, method = "pearson") # correlation plot
plot(SART$corr)
## ANOTHER ATTEMPT
# install.packages("ggplot2")
# install.packages("GGally")
library("ggplot2")
library("GGally")
ggpairs(
data1,
title = "Correlation matrix for SART, Recognition, Discrimination and Fluid Intellegence")
ggpairs(data2)
### -- CORRELATION BETWEEN GENDER / AGE WITH  ITEM LEVEL DATA-- #
# DRT - R
DRT.R.cor.sex <- cor(DRT_recognition, DRT_grp$sex_M1_F0)
corrplot(DRT.R.cor.sex)
DRT.R.cor.age <- cor(DRT_recognition, DRT_grp$age)
corrplot(DRT.R.cor.age)
# DRT - D
DRT.D.cor.sex <- cor(DRT_discrimination, DRT_grp$sex_M1_F0)
corrplot(DRT.D.cor.sex)
DRT.D.cor.age <- cor(DRT_discrimination, DRT_grp$age)
corrplot(DRT.D.cor.age)
## 1. Clear work space and set path variables
rm(list=ls()) # clear environment
graphics.off() # clear plots
## 2. path vars for scripts preprocessing and data analysis
preprocessing_scripts <- "/Users/japneetbhatia/desktop/thesis/9.PREPROCESSING/scripts"
analysis_scripts <- "/Users/japneetbhatia/desktop/thesis/13.STATISTICAL_ANALYSIS/scripts"
setwd(analysis_scripts)
